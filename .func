# 第1引数の数が第2引数未満だったら1を返す
# ex: `check_arg $# 0 
local check_arg() {
  if [[ ${1} -lt ${2} ]]; then
    echo "Error: few arguments; expected ${1}" 1>&2
    return 1
  fi
}

comp() {
  file_list=""
  exec_args=""
  out_name=""
  compiler="${CC:-clang}"

  for arg_raw in $@; do
    arg_name=${arg_raw/.*}
    arg_ext=${arg_raw/*.}
    echo ">>> raw: ${arg_raw}, name: ${arg_name}, ext: ${arg_ext}"

    # Use exact-matched file if it exists (and is c or cpp file)
    if [[ -e "${arg_raw}" && "${arg_name}" != "${arg_ext}" && \
        ( "${arg_ext}" == "c" || "${arg_ext}" == "cpp" ) ]]; then
      file_list+=" ${arg_raw}"
      if [[ "${arg_ext}" == "cpp" ]]; then
        compiler="${CXX:-clang++}"
      fi
    # priorize "*.c"
    elif [[ -e "${arg_name}.c" ]]; then
      file_list+=" ${arg_name}.c"
    elif [[ -e "${arg_name}.cpp" ]]; then
      file_list+=" ${arg_name}.cpp"
      compiler="${CXX:-clang++}"
    else
      echo -e "[\e[0;31mERROR\e[m] Not Found: ${arg_name}.c(pp)?"
      return 1
    fi
    if [[ "${out_name}" == "" ]]; then
      out_name=${arg_name}
    fi
  done

  if [[ "${out_name}" == "" ]]; then
    echo -e "[\e[0;31mERROR\e[m] Please specify available .c file"
    return 1
  fi

  executable_extension="out"
  separator="-----------"

  compile="${compiler} -Wall -g ${CFLAGS} -o ${out_name}.${executable_extension}${file_list}"
  run="./${out_name}.${executable_extension} ${exec_args}"

  # コンパイル（失敗時にスクリプトを終了させる）
  echo -e "\$ ${compile}"
  eval ${compile} || return 1

  # コマンド表示（コピペ用）
  echo "${separator}"
  echo -e "\$ ${run}"

  # コマンドを実行する
  eval ${run}
  echo "[Exit: $?]"
  echo "${separator}"
}

# C++のコードを即席で実行しちゃうぞ
# instantcppだとにてる名前のコマンド多くて補完がだめ
cppinstant() {
  src=$(mktemp --suffix=.cpp)
  cat << END > ${src}
#include <bits/stdc++.h>
using namespace std;

int main() {

}
END
  out=$(mktemp --suffix=.out)
  nvim ${src}
  g++ -Wall -o ${out} ${src} && ${out}
  rm -f ${src} ${out}
}

calc() {
  python3 -c "print(${@})"
}

mkcd() {
  mkdir -p "$@" && cd "$1"
}

local git_arg() {
  check_arg $# 1 || return 1
  repo="$1"
  if [[ ! "$1" =~ "/" ]]; then
    repo="$repo/$2"
    shift
  fi
  shift
  arg=$@
}

sshclone() {
  git_arg $@
  echo -e "\e[30;42m>> git clone git@github.com:$repo $arg\e[m"
  git clone git@github.com:$repo $arg
}

clone() {
  git_arg $@
  echo -e "\e[30;42m>> git clone https://github.com/$repo arg\e[m"
  git clone https://github.com/$repo $arg
}

asm() {
  check_arg $# 1 || return 1
  nasm -g -f elf64 ${1} -o a.o && ld -m elf_x86_64 a.o && rm a.o
}

